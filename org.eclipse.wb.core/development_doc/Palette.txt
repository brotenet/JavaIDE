Каждый java файл относится к одному из UI-подмножеств (SWT, Swing, GWT и т.д.).
Каждому из подмножеств соответствует своя собственная палитра.

--------------------------------------------------------------------------------------------
Палитра состоит из провайдера и обьектов 3-х видов:

Tool

Категория (Category)
	[Название]
	[Область видимости...]
	[Состояние видимости (TRUE | FALSE, default = TRUE)]
	[Состояние 'раскрытости' (OPEN | PINNED | CLOSED, default = OPEN)]

Entry
	[Название]
	[Иконка...]
	[Описание (необязательно)]
	[Категория]
	[Область видимости...]
	[Состояние видимости (TRUE | FALSE, default = TRUE)]
	[Действие при использовании...]

--------------------------------------------------------------------------------------------
Атрибуты 'области видимости' и 'состояния видимости' назначенные для категории
наследуются ее entry'ми. Entry могут перекрыть эти значения собственными.

Область видимости может ограничиваться:
	[версией Eclipse (minIDEVersion)]
	[неподдерживаемые OS (excludeOS)]
	[поддерживаемые OS (includeOS)]
	[версией дизайнера (PRO | EVALUTION)]
	[возможностью загрузки заданного java класса]
	[специальный 'ключ видимости' (showCondition)...]

Значение по 'ключу видимости' определяется провайдером. При выполнеии определеных действий
провайдер может установить значение в TRUE или FALSE по ключу, и те обьекты которые попадяют под его действие,
будут или добавлены на палитру или удалены с нее. Так-же если в палитре происходит
добавление entry относящюуся к другой палитре (в случае когда это вообще допустимо, например
в SWT можно добавлять Swing'вые entry когда используется SWT_AWT) провайдер должен установить
для них 'ключ видимости' предусмотренный им для этой другой палитры. Если эти новые entry были
добавленны в новую тут-же созданную категорию, то и она должна наследовать этот ключ.

--------------------------------------------------------------------------------------------
Набор entry'сов и категорий для каждой палитры, которые доступны в дизайнере описываются в XML
файле. Пользователь может изменить настройки каждой палитру. Изменная палитра может хранится в 2-х
местах: настройки палитры для всего workspace'а или же java проекты могут иметь собсвенные настройки палитры.

Пользователь может менять состояние 'раскрытости' и видимости. Так-же можно менять порядок следования
как категорий друг за другом, так и расположение entry'сов в категориях. Можно добавить новые категории и entry.
Можно добавлять набор entry'сов в том числе в отдельной категории, из JAR'а с java бинами описанными в манифесте.

При добавлении через 'диалог палитры' значения обьектов палитры хранятся в настройках палитры.
Так-же категории и entry могут быть добавлены через extension point. Наличие таких обьектов определяется
при запуске первого дизайнера.

При использовании специальных tool'в для выбора компонентов (например 'choose panel') нужно
создавать для них entry и добавлять ее в специальную категорию (Custom Controls) палитры пользователя.

Провайдер может предоставлять свой собственный диалог выбора компонента или диалог выбора иконки
при добавлении entry.

При добавлении entry, если это предусмотренно палитрой, возможено указание принадлежности entry
к другой палитре (в SWT палитре можно создавать Swing entry).

============================================================================================
При создании новой entry указывается код для генерации и импорты. Это чистый String, и классы и
класс-лоадеры ненужны.

Иконка берется или из абсолютного пути файловой системы или из BeanInfo или из базы иконок дизайнера.
Если entry описывается через extension point то иконка определяется или из плагина или из BeanInfo.
(А вообщето тогда BeanInfo это зло! так как если использовать только код для создания, то небудет никакой
возни с загрузкой классов, а BeanInfo все это портит)

Стандартные палитры дизайнера грузить через extension point. А изменения которые сделал пользователь хранить
в виде патча, который накладывается на палитру загруженную через все соответствующие ей extension point'ы.



















